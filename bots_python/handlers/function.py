from aiogram import types, F
from aiogram.filters import Command
from aiogram import Router
import aiohttp
import dotenv
import asyncio
from dotenv import load_dotenv
import os
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

load_dotenv()


cats = os.getenv('CATS_TOKEN')
dog = os.getenv('DOG_TOKEN')
key = os.getenv('FBOT_TOKEN')

router = Router()

wea = os.getenv("WEA_TOKEN")


# FSM 
class WeatherStates(StatesGroup):
    waiting_location = State()

async def get_weather(lat, lon):
    url = "https://api.openweathermap.org/data/2.5/weather"
    params = {
        "lat": lat,
        "lon": lon,
        "appid": wea,
        "units": "metric",
        "lang": "ru"
    }

    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as resp:
            if resp.status == 200:
                data = await resp.json()
                city = data.get("name")
                temp = data["main"]["temp"]
                feels = data["main"]["feels_like"]
                humidity = data["main"]["humidity"]
                pressure = data["main"]["pressure"]
                wind_speed = data["wind"]["speed"]
                wind_speed_kmh = round(wind_speed * 3.6, 1)
                description = data["weather"][0]["description"]

                result = (
                    f"üåç –ì–æ—Ä–æ–¥: {city}\n"
                    f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels}¬∞C)\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                    f"üåÄ –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞\n"
                    f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å (~{wind_speed_kmh} –∫–º/—á)\n"
                    f"‚òÅÔ∏è {description.capitalize()}"
                )
                return result
            else:
                return f"–û—à–∏–±–∫–∞ {resp.status}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."

# /weather: –∑–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ 
@router.message(Command(commands=["weather"]))
async def weather_start(message: types.Message, state: FSMContext):
    button = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[button]],
        resize_keyboard=True
    )
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã.\n"
        "–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.",
        reply_markup=keyboard
    )
    await state.set_state(WeatherStates.waiting_location)

#–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ 
@router.message(WeatherStates.waiting_location, F.content_type == "location")
async def location_received(message: types.Message, state: FSMContext):
    lat = message.location.latitude
    lon = message.location.longitude
    weather_info = await get_weather(lat, lon)
    await message.answer(weather_info, reply_markup=types.ReplyKeyboardRemove())
    await state.clear()


@router.message(WeatherStates.waiting_location)
async def location_not_received(message: types.Message, state: FSMContext):
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–≤–æ–∏)
    lat = 53.198627
    lon = 50.113987
    weather_info = await get_weather(lat, lon)
    await message.answer(
        "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞. –í–æ—Ç –ø–æ–≥–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:", reply_markup=types.ReplyKeyboardRemove()
    )
    await message.answer(weather_info)
    await state.clear()



@router.message(Command(commands=["cats"]))
async def send_cat(message: types.Message):
    await message.answer("–°–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –∫–æ—Ç–∞...")
    url = "https://api.thecatapi.com/v1/images/search"
    headers = {"x-api-key": cats}
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                data = await response.json()
                image_url = data[0]["url"]
                await message.answer_photo(image_url)
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ç–∞.")

@router.message(Command(commands=["dog"]))
async def send_dog(message: types.Message):
    await message.answer("–°–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏...")
    url = "https://api.thedogapi.com/v1/images/search"
    headers = {"x-api-key": dog}
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                data = await response.json()
                image_url = data[0]["url"]
                await message.answer_photo(image_url)
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±–∞–∫–∏.")

@router.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram")

@router.message(Command(commands=["info"]))
async def info_handler(message: types.Message):
    await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ ")



